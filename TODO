1.3.3 (1.4 after all these changes?)
------------------------------------
Global
    - Replace all $_GET, $_POST and $_SESSION accesses with an Input class that has input cleaning.
    - Add x_path() functions a la Rails to clean up some URL generation
    - Use header('HTTP/1.0 404 Not Found'); instead of die('Do not access this file directly.');
    - Remove the closing '?>' from all PHP-only files. It's not required and can create problems.
    
Global de-stupifying from 1.3
    - Search for '1.3' across the project and probably undo most of it, or make it less stupid.
    - Game log parsers need their own folder, probably. 
      [Also need an abstract class I reckon... see Game Management below - Daz]
    - Everquest2German.php and Everquest2-german.php. One of them needs to go. 
      Then again, both of them might if we start adding the proper layers of abstraction to this.

Installation
    - Add checks to prevent people overriding their current installation data.
    - Perhaps replace the installation stuff with the development branch's (needs a bit of polish tho).
    
Languages
    - Re-write the language files in a new format for ease of writing and readability.
    - Remove the excess crap from the language files if there is any
    - Add language file calls to scripts which need it (ie: install.php, and any other files which
      may have hard-coded, language-specific text and messages)
    
/login.php
    - re-write the whole thing. In particular it probably makes more sense to have an
      action=(login|logout) variable than separate variables for both.
      Update other parts of eqdkp that use login.php accordingly.
      
/admin/addturnin.php
    - Consider re-naming. It isn't so much turning something in as it is transferring something (an item)
      from one person to another. Also, no records for "turn-ins" are kept, so it's hardly 'adding' a turn-in.
      
/admin/upgrade.php
    - Create an eqdkp_version config entry, so that we can compare that value against
      the EQDKP_VERSION constant, and if the two differ, inform the user that they
      should run upgrade.php. upgrade.php then needs to write this value when it's
      done running.
    - Change from functions into an abstracted class, one file per version. These
      files are auto-discovered by upgrade.php and the appropriate file is included
      and run based on the user's setting. Remember that every file AFTER the one
      chosen has to be included and run as well, in sequence.
    
Less important stuff:
---------------------
Global
    - Create a time management scheme for EQDKP. 
      We need to include:
        - Default timestamp
        - Default timezone
        - User-specific timestamp and timezone
        - functions to generate input fields for times and dates based on the above
      We need to apply this in order to:
        - Make date and time input and display consistent (storage is already in unix format, so all good)
        - Make date and time display accurate depending on timezone and timestamp preferences
        - Be able to run independent of the timezone of the server EQDKP is running on!
          (I notice this one a lot, because an Australian guild using an American server means that
           the time between a raid entry and the DKP attendance and last raid etc. being updated happens 
           according to server time. That's a massive time difference of 14-18 hours.)

Game Management
    - Create an eqdkp_game class to manage game-related aspects of eqdkp.
      Basically, we need to come up with a decent class that can be extended with the individual
      games' specific/unique information. 
      Adding this level of abstraction means that the main class handle shit like updating
      the database with races/classes/factions, as well as maybe the parsing mentioned above.
    - Amalgamate all language implementations for a game into a single game script, and start
      using language files for the games.
    - Hook all the above in the installation process so that users can choose their default game
      from the get-go.
    - The way that class selection is done is stupid. For WoW there's "Hunter (0-39)", and "Hunter (40+)",
      for purposes of filtering by armor. The system should just have one Hunter option, and then figure
      out what they use based on their actual level, which we also ask for.

/listmembers.php
    - Separate the compare members code from the default list members code (make a new file).

/listitems.php
    - Separate the unique item list code from the item history code (make a new file).

/admin/index.php
    - Move the stuff in the switch case for resolve_eqdkp_page into the appropriate files to
      reduce coupling of admin pages, as well as reduce the number of files required to be
      updated each time a new admin page or plugin page is created.
      Unfortunately I think this is a rather involved process, and I'd say the tradeoff 
      between benefit and required effort would be marginal.
      
1.4/1.5 and beyond
------------------
- Probably go to an ActiveRecord design. The script for adding raids shouldn't have
  to know whether or not to update a member's active/inactive status, for example. It
  would just call Member::updateStatus() or something and the model would decide.
- Change administrative functions to APIs. Then addraid.php would only deal with user input,
  and make API calls to update a raid, add attendees to it, etc.
- Update to PHP5 along with the above two changes?
- Update our templating engine. Smarty? Sugar-PHP if we go PHP5?